/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zapocet2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

/**
 *
 * @author igor
 */


@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class Zapocet2Test {

    private static ResultSet rs = null;
    private static EntityManagerFactory emf;

    public Zapocet2Test() throws ClassNotFoundException {
        Class.forName("org.apache.derby.jdbc.ClientDriver");
    }

    @BeforeClass
    public static void setUpClass() {
        prepareTables();
        emf = Persistence.createEntityManagerFactory("zapocet2PU");
    }

    static String CreateOsoba
            = "CREATE TABLE OSOBA ("
            + "ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY CONSTRAINT OSOBA_PK PRIMARY KEY, "
            + "MENO VARCHAR(80), "
            + "NARODENA DATE "
            + ")";

    static String CreatePredmet
            = "CREATE TABLE PREDMET ( "
            + "KOD VARCHAR(80) CONSTRAINT PREDMET_PK PRIMARY KEY, "
            + "ROCNIK VARCHAR(80), "
            + "OSOBA_ID BIGINT references OSOBA(ID) "
            + ")";

    static private void dropTable(Statement st, String table) {
        try {
            st.executeUpdate("DROP TABLE " + table);
        } catch (SQLException ex) {
            System.out.println("" + ex.getMessage());
        }
    }

    static private void prepareTables() {

        try (Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/sk_priprava", "app", "app")) {

            Statement st = con.createStatement();
            System.out.println("IKO dropping ...");

//            dropTable(st, "PREDMETOSOBA");
//            dropTable(st, "OSOBAPREDMET");
//            dropTable(st, "PREDMET_OSOBA");
            dropTable(st, "OSOBA_PREDMET");

            dropTable(st, "PREDMET");
            dropTable(st, "OSOBA");

            st.executeUpdate(CreateOsoba);
            st.executeUpdate(CreatePredmet);

            st.executeUpdate("INSERT INTO OSOBA VALUES (1, 'Adam', NULL)");
            st.executeUpdate("INSERT INTO OSOBA VALUES (2, 'Beta', NULL)");
            st.executeUpdate("INSERT INTO PREDMET VALUES ('P1', 'Ing-1', 1)");
            st.executeUpdate("INSERT INTO PREDMET VALUES ('P2', 'Ing-1', 1)");

//            st.executeUpdate("INSERT INTO OSOBA_PREDMET VALUES (1, 'P1')");
//            st.executeUpdate("INSERT INTO OSOBA_PREDMET VALUES (1, 'P2')");
//            st.executeUpdate("INSERT INTO OSOBA_PREDMET VALUES (2, 'P1')");

        } catch (SQLException ex) {
            Logger.getLogger(Zapocet2Test.class.getName()).log(Level.INFO, ex.getMessage());
        }
    }

    // zakladny test mapovania jednoduchych datovych clenov
    @Test
    public void UT010() {
        EntityManager em = emf.createEntityManager();

        // Osoba 
        Osoba o1 = null;
        try {
            o1 = em.find(Osoba.class, 1L);
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertNotNull(o1);
        assertEquals("", "Adam", o1.getMeno());

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // zakladny test mapovania jednoduchych datovych clenov
    @Test
    public void UT011() {
        EntityManager em = emf.createEntityManager();

        // Predmet
        Predmet p1 = null;
        try {
            p1 = em.find(Predmet.class, "P1");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertNotNull(p1);
        assertEquals("", "Ing-1", p1.getRocnik());

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // testy metody pocetPrednasok
    @Test
    public void UT020_pocetPrednasok() {
        EntityManager em = emf.createEntityManager();
        int r = 0;

        try {
            r = Zapocet2.pocetPrednasok(em, "Adam");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertEquals("", 2, r);

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // testy metody pocetPrednasok
    @Test
    public void UT021_pocetPrednasok() {
        EntityManager em = emf.createEntityManager();
        int r = 0;

        try {
            r = Zapocet2.pocetPrednasok(em, "Beta");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertEquals("", 0, r);

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // pocetPredmetov(em, "Nikto"); TREBA
    // pocetPredmetov(em, null);    NETREBA
    @Test
    public void UT03_pocetPrednasok_Neg1() {
        EntityManager em = emf.createEntityManager();
        int r = 0;

        try {
            r = Zapocet2.pocetPrednasok(em, "Nikto");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertEquals("", 0, r);

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // testy metody prednasajuci
    @Test
    public void UT04_prednasajuci() {
        EntityManager em = emf.createEntityManager();
        Osoba os1 = null;

        try {
            os1 = Zapocet2.prednasajuci(em, "P1");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertNotNull(os1);
        assertEquals("", "Adam", os1.getMeno());

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    @Test
    public void UT05_prednasajuci_Neg1() {
        EntityManager em = emf.createEntityManager();
        Osoba os1 = null;

        try {
            os1 = Zapocet2.prednasajuci(em, "Ziadny");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertNull(os1);

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // testy metody novyPredmet - osoba existuje 
    @Test
    public void UT060_novyPredmet() {
        EntityManager em = emf.createEntityManager();
        boolean b = false;

        try {
            b = Zapocet2.novyPredmet(em, "P3", "Adam");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertTrue(b);

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // kontrola poctu predmetov
    @Test
    public void UT061_pocetPrednasok() {
        EntityManager em = emf.createEntityManager();
        int r = 0;

        Query q = em.createNativeQuery("select count(*) from PREDMET where OSOBA_ID=1");
        Integer pocet =(Integer) q.getSingleResult();
//        try {
//            r = Zapocet2.pocetPrednasok(em, "Adam");
//        } catch (Exception e) {
//            fail("CHYBA EX: " + e.getMessage());
//        }

        assertEquals("", 3, pocet.intValue());

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // treba
    // kontrola prednasajucich
    @Test
    public void UT062_prednasajuci() {
        EntityManager em = emf.createEntityManager();
        Osoba os = null;

        // prednasajuci predmetu P3
        try {
            os = Zapocet2.prednasajuci(em, "P3");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }

        assertNotNull(os);
        assertEquals("", "Adam", os.getMeno());
        assertNotNull("", os.getPrednasky());
//        assertEquals("", 3, os.getPrednasky().size());

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // novyPredmet - nova osoba - treba. moze sa rozdelit na dva
    @Test
    public void UT070_novyPredmetOsoba() {
        EntityManager em = emf.createEntityManager();
        boolean b = false;
        int r = 0;

        try {
            b = Zapocet2.novyPredmet(em, "P4", "Igor");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }
        assertTrue(b);

        Predmet pred = em.find(Predmet.class, "P4");
        assertNotNull("", pred);
        assertNotNull(pred.getProfesor());
        assertEquals("", "Igor", pred.getProfesor().getMeno());

        try {
            r = Zapocet2.pocetPrednasok(em, "Igor");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }
        assertEquals("", 1, r);


        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // novy predmet - ziadna osoba
    @Test
    public void UT080_novyPredmetZiadnaOsoba() {
        EntityManager em = emf.createEntityManager();
        boolean b = false;
        int r = 0;

        try {
            b = Zapocet2.novyPredmet(em, "P5", null);
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }
        assertTrue(b);
        
        Predmet pred = em.find(Predmet.class, "P5");
        assertNotNull("", pred);
        assertNull(pred.getProfesor());

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    // chybne argumenty - mozno zaradit na koniec testov
    @Test
    public void UT90_predmetExistuje() {
        EntityManager em = emf.createEntityManager();
        boolean b = false;

        try {
            b = Zapocet2.novyPredmet(em, "P1", "Beta");
        } catch (Exception e) {
            fail("CHYBA EX: " + e.getMessage());
        }
        assertTrue(!b);

        Predmet pred = em.find(Predmet.class, "P1");
        assertNotNull("", pred);
        assertNotNull(pred.getProfesor());
        assertEquals("", "Adam", pred.getProfesor().getMeno());

        try {
            em.close();
        } catch (Exception e) {
        }
    }

    @Test
    public void UT99_main() {
        EntityManager em = emf.createEntityManager();
        boolean b=false;
        int r = 0;
        Osoba os = null;

        try {
            Zapocet2.novyPredmet(em, "OOP", "Hrach" );
            Zapocet2.novyPredmet(em, "VSA", "Mrkva");
            Zapocet2.novyPredmet(em, "ASOS", "Mrkva");

            r = Zapocet2.pocetPrednasok(em, "Mrkva");
            
            os = Zapocet2.prednasajuci(em, "VSA");

        } catch (Exception e) {
            e.printStackTrace();
            fail("CHYBA EX: " + e.getMessage());
        }
        assertEquals("", 2, r);
        assertNotNull(os);
        assertEquals("", "Mrkva", os.getMeno());
        assertEquals("", 2, os.getPrednasky().size());

        try {
            em.close();
        } catch (Exception e) {
        }
    }


}
